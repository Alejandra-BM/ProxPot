---
- name: Ensure required packages are installed
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  loop:
    - git
    - wget

- name: Clone dionaea repository
  git:
    repo: 'https://github.com/DinoTools/dionaea.git'
    dest: /home/{{ ansible_user }}/dionaea
    version: master
  become: yes

- name: Set public IP and fixed passive port in Dionaea FTP server
  replace:
    path: "/home/{{ ansible_user }}/dionaea/modules/python/dionaea/ftp.py"
    regexp: |
      (\s+)self\.dtf = FTPDataListen\(host=self\.local\.host, port=0, ctrl=self\)
      \1host = self\.dtf\.local\.host
      \1port = self\.dtf\.local\.port
      \1self\.reply\("entering_pasv_mode", host=encodeHostPort\(host, port\)\)
    replace: |
      \1self.dtf = FTPDataListen(host="0.0.0.0", port={{ ftp_port }}, ctrl=self)
      \1host = "{{ public_ip }}"
      \1port = self.dtf.local.port
      \1self.reply("entering_pasv_mode", host=encodeHostPort(host, port))
  become: yes

- name: Create Downloads directory
  file:
    path: "/home/{{ ansible_user }}/Downloads"
    state: directory
    mode: '0755'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: Download libemu .deb packages
  get_url:
    url: "{{ item }}"
    dest: "/home/{{ ansible_user }}/Downloads/"
  loop:
    - http://archive.ubuntu.com/ubuntu/pool/universe/libe/libemu/libemu2_0.2.0+git20120122-1.2build1_amd64.deb
    - http://archive.ubuntu.com/ubuntu/pool/universe/libe/libemu/libemu-dev_0.2.0+git20120122-1.2build1_amd64.deb

- name: Install downloaded libemu .deb packages
  apt:
    deb: "/home/{{ ansible_user }}/Downloads/{{ item }}"
  loop:
    - libemu2_0.2.0+git20120122-1.2build1_amd64.deb
    - libemu-dev_0.2.0+git20120122-1.2build1_amd64.deb

- name: Install required dependencies
  apt:
    name:
      - build-essential
      - cmake
      - check
      - cython3
      - libcurl4-openssl-dev
      - libemu-dev
      - libev-dev
      - libglib2.0-dev
      - libloudmouth1-dev
      - libnetfilter-queue-dev
      - libnl-3-dev
      - libpcap-dev
      - libssl-dev
      - libtool
      - libudns-dev
      - python3
      - python3-dev
      - python3-bson
      - python3-yaml
      - python3-boto3
      - fonts-liberation
    state: present
    update_cache: yes

- name: Create build directory
  file:
    path: "/home/{{ ansible_user }}/dionaea/build"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: Run cmake
  command: cmake -DCMAKE_INSTALL_PREFIX:PATH=/opt/dionaea ..
  args:
    chdir: "/home/{{ ansible_user }}/dionaea/build"

- name: Compile dionaea
  command: make
  args:
    chdir: "/home/{{ ansible_user }}/dionaea/build"

- name: Install dionaea
  command: make install
  args:
    chdir: "/home/{{ ansible_user }}/dionaea/build"
  become: yes

- name: Update dionaea.cfg - uncomment listen.addresses and update modules
  lineinfile:
    path: /opt/dionaea/etc/dionaea/dionaea.cfg
    regexp: '^#?listen.addresses='
    line: 'listen.addresses=127.0.0.1'
    state: present
  become: yes

- name: Ensure modules line includes required modules
  lineinfile:
    path: /opt/dionaea/etc/dionaea/dionaea.cfg
    regexp: '^modules='
    line: 'modules=curl,python,emu,ftp,http'
    state: present
  become: yes

# Maybe the path to getting JSON to work is a bit chaotic, but itâ€™s the way it worked for me
- name: Remove log_sqlite.yaml from enabled handlers
  file:
    path: /opt/dionaea/etc/dionaea/ihandlers-enabled/log_sqlite.yaml
    state: absent
  become: yes

- name: Remove dionaea.sqlite from enabled handlers
  file:
    path: /opt/dionaea/var/lib/dionaea/dionaea.sqlite
    state: absent
  become: yes

- name: Configure Dionaea JSON logging handler in the available directory
  copy:
    dest: "/opt/dionaea/etc/dionaea/ihandlers-available/log_json.yaml"
    content: |
      - name: log_json
        config:
          # Uncomment next line to flatten object lists to work with ELK
          flat_data: true
          handlers:
            - file:///opt/dionaea/var/lib/dionaea/dionaea.json
  become: yes

# Ensure the symbolic link for log_json.yaml is created in the enabled directory
- name: Ensure symbolic link for log_json.yaml is created in the enabled directory
  file:
    src: /opt/dionaea/etc/dionaea/ihandlers-available/log_json.yaml
    dest: /opt/dionaea/etc/dionaea/ihandlers-enabled/log_json.yaml
    state: link
  become: yes

- name: Ensure dionaea is started with the right options
  shell: sudo /opt/dionaea/bin/dionaea -D -l all,-debug -L '*' 
  become: yes
  ignore_errors: yes
